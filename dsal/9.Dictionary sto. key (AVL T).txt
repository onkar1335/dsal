#include <iostream>
#include <algorithm>
using namespace std;

struct Node {
    string keyword, meaning;
    Node* left;
    Node* right;
    int height;
};

int getHeight(Node* n) {
    return n ? n->height : 0;
}

int getBalance(Node* n) {
    return n ? getHeight(n->left) - getHeight(n->right) : 0;
}

Node* createNode(string key, string meaning) {
    Node* n = new Node{key, meaning, nullptr, nullptr, 1};
    return n;
}

Node* rotateRight(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

    return x;
}

Node* rotateLeft(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

    return y;
}

Node* insert(Node* root, string key, string meaning) {
    if (!root) return createNode(key, meaning);

    if (key < root->keyword)
        root->left = insert(root->left, key, meaning);
    else if (key > root->keyword)
        root->right = insert(root->right, key, meaning);
    else {
        cout << "Keyword already exists!\n";
        return root;
    }

    root->height = 1 + max(getHeight(root->left), getHeight(root->right));
    int balance = getBalance(root);

    if (balance > 1 && key < root->left->keyword)
        return rotateRight(root);
    if (balance < -1 && key > root->right->keyword)
        return rotateLeft(root);
    if (balance > 1 && key > root->left->keyword) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }
    if (balance < -1 && key < root->right->keyword) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }

    return root;
}

void inOrder(Node* root) {
    if (root) {
        inOrder(root->left);
        cout << root->keyword << " : " << root->meaning << endl;
        inOrder(root->right);
    }
}

bool search(Node* root, string key, int& comparisons) {
    while (root) {
        comparisons++;
        if (key == root->keyword) return true;
        if (key < root->keyword)
            root = root->left;
        else
            root = root->right;
    }
    return false;
}

int main() {
    Node* root = nullptr;
    int choice;

    do {
        cout << "\n--- Dictionary using AVL Tree ---\n";
        cout << "1. Insert Keyword\n2. Display Dictionary\n3. Search Keyword\n4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            string key, meaning;
            cout << "Enter keyword: ";
            cin >> key;
            cout << "Enter meaning: ";
            cin >> meaning;
            root = insert(root, key, meaning);
        } else if (choice == 2) {
            cout << "\nDictionary in Ascending Order:\n";
            inOrder(root);
        } else if (choice == 3) {
            string key;
            int comparisons = 0;
            cout << "Enter keyword to search: ";
            cin >> key;
            if (search(root, key, comparisons))
                cout << "Keyword found in " << comparisons << " comparisons.\n";
            else
                cout << "Ke
