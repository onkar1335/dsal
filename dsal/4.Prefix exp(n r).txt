#include <iostream>
#include <stack>
#include <cctype>
using namespace std;

class Node {
public:
    char data;
    Node* left;
    Node* right;

    Node(char val) {
        data = val;
        left = right = nullptr;
    }
};

// Check if operator
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Build expression tree from prefix (scanned right to left)
Node* buildTree(string prefix) {
    stack<Node*> st;

    for (int i = prefix.length() - 1; i >= 0; i--) {
        char ch = prefix[i];

        Node* node = new Node(ch);

        if (isOperator(ch)) {
            node->left = st.top(); st.pop();
            node->right = st.top(); st.pop();
        }
        st.push(node);
    }

    return st.top();
}

// Non-recursive postorder traversal
void postorderNonRecursive(Node* root) {
    if (!root) return;

    stack<Node*> st1, st2;
    st1.push(root);

    while (!st1.empty()) {
        Node* node = st1.top(); st1.pop();
        st2.push(node);

        if (node->left) st1.push(node->left);
        if (node->right) st1.push(node->right);
    }

    cout << "Postorder (non-recursive): ";
    while (!st2.empty()) {
        cout << st2.top()->data << " ";
        st2.pop();
    }
    cout << endl;
}

// Delete tree
void deleteTree(Node* node) {
    if (!node) return;
    deleteTree(node->left);
    deleteTree(node->right);
    delete node;
}

int main() {
    string prefix;
    cout << "Enter prefix expression: ";
    cin >> prefix;  // Example: +--a*bc/def

    Node* root = buildTree(prefix);

    postorderNonRecursive(root);

    deleteTree(root);
    cout << "Tree deleted successfully.\n";

    return 0;
}
