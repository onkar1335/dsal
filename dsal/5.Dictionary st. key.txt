#include <iostream>
#include <string>
using namespace std;

class Node {
public:
    string keyword, meaning;
    Node* left;
    Node* right;

    Node(string k, string m) {
        keyword = k;
        meaning = m;
        left = right = nullptr;
    }
};

class Dictionary {
    Node* root;

    Node* insert(Node* node, string k, string m) {
        if (!node)
            return new Node(k, m);
        if (k < node->keyword)
            node->left = insert(node->left, k, m);
        else if (k > node->keyword)
            node->right = insert(node->right, k, m);
        return node;
    }

    Node* findMin(Node* node) {
        while (node && node->left)
            node = node->left;
        return node;
    }

    Node* deleteNode(Node* node, string k) {
        if (!node) return nullptr;
        if (k < node->keyword)
            node->left = deleteNode(node->left, k);
        else if (k > node->keyword)
            node->right = deleteNode(node->right, k);
        else {
            if (!node->left) return node->right;
            else if (!node->right) return node->left;

            Node* temp = findMin(node->right);
            node->keyword = temp->keyword;
            node->meaning = temp->meaning;
            node->right = deleteNode(node->right, temp->keyword);
        }
        return node;
    }

    void inorder(Node* node) {
        if (!node) return;
        inorder(node->left);
        cout << node->keyword << " : " << node->meaning << endl;
        inorder(node->right);
    }

    void reverseInorder(Node* node) {
        if (!node) return;
        reverseInorder(node->right);
        cout << node->keyword << " : " << node->meaning << endl;
        reverseInorder(node->left);
    }

    Node* search(Node* node, string k, int& comparisons) {
        if (!node) return nullptr;
        comparisons++;
        if (k == node->keyword) return node;
        else if (k < node->keyword) return search(node->left, k, comparisons);
        else return search(node->right, k, comparisons);
    }

    void update(Node* node, string k, string newMeaning) {
        if (!node) return;
        if (k == node->keyword) {
            node->meaning = newMeaning;
            cout << "Meaning updated.\n";
        } else if (k < node->keyword)
            update(node->left, k, newMeaning);
        else
            update(node->right, k, newMeaning);
    }

public:
    Dictionary() {
        root = nullptr;
    }

    void add(string k, string m) {
        root = insert(root, k, m);
    }

    void deleteWord(string k) {
        root = deleteNode(root, k);
    }

    void updateMeaning(string k, string m) {
        update(root, k, m);
    }

    void searchKeyword(string k) {
        int comparisons = 0;
        Node* res = search(root, k, comparisons);
        if (res)
            cout << "Found! Meaning: " << res->meaning << "\nComparisons: " << comparisons << endl;
        else
            cout << "Keyword not found. Comparisons: " << comparisons << endl;
    }

    void displayAscending() {
        cout << "\nAscending order:\n";
        inorder(root);
    }

    void displayDescending() {
        cout << "\nDescending order:\n";
        reverseInorder(root);
    }
};

int main() {
    Dictionary dict;
    int choice;
    string keyword, meaning;

    do {
        cout << "\n--- Dictionary Menu ---\n";
        cout << "1. Add keyword\n2. Delete keyword\n3. Update meaning\n4. Search keyword\n";
        cout << "5. Display Ascending\n6. Display Descending\n7. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter keyword: ";
            cin >> keyword;
            cout << "Enter meaning: ";
            cin.ignore();
            getline(cin, meaning);
            dict.add(keyword, meaning);
            break;
        case 2:
            cout << "Enter keyword to delete: ";
            cin >> keyword;
            dict.deleteWord(keyword);
            break;
        case 3:
            cout << "Enter keyword to update: ";
            cin >> keyword;
            cout << "Enter new meaning: ";
            cin.ignore();
            getline(cin, meaning);
            dict.updateMeaning(keyword, meaning);
            break;
        case 4:
            cout << "Enter keyword to search: ";
            cin >> keyword;
            dict.searchKeyword(keyword);
            break;
        case 5:
            dict.displayAscending();
            break;
        case 6:
            dict.displayDescending();
            break;
        case 7:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice!\n";
        }
    } while (choice != 7);

    return 0;
}
